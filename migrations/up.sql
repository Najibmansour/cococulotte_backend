-- ===== Helpers: updated_at trigger =====
CREATE OR REPLACE FUNCTION set_timestamp()
RETURNS trigger AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- ===== Clean up (drop in right order) =====
DROP TABLE IF EXISTS order_items CASCADE;
DROP TABLE IF EXISTS orders CASCADE;
DROP TABLE IF EXISTS products CASCADE;
DROP TABLE IF EXISTS collections CASCADE;
DROP TABLE IF EXISTS product_types CASCADE;
DROP TABLE IF EXISTS about_json CASCADE;
DROP TABLE IF EXISTS contact_json CASCADE;

-- ===== Reference tables =====

CREATE TABLE collections (
  slug TEXT PRIMARY KEY,
  title TEXT NOT NULL UNIQUE,
  header_image TEXT,
  description TEXT
);

CREATE TABLE product_types (
  slug TEXT PRIMARY KEY,
  title TEXT NOT NULL UNIQUE
);

-- ===== Products =====
CREATE TABLE products (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name TEXT NOT NULL,
  price NUMERIC(10,2) NOT NULL,
  collection_slug TEXT NOT NULL REFERENCES collections(slug) ON DELETE RESTRICT,
  type_slug TEXT NOT NULL REFERENCES product_types(slug) ON DELETE RESTRICT,
  image_url TEXT,
  quantity INTEGER NOT NULL DEFAULT 0 CHECK (quantity >= 0),
  colors TEXT[] NOT NULL DEFAULT '{}', -- array of HEX codes (e.g. ['#000000','#FFFFFF'])
  description TEXT NOT NULL DEFAULT '',
  available BOOLEAN GENERATED ALWAYS AS (quantity > 0) STORED,
  created_at TIMESTAMP NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP NOT NULL DEFAULT NOW()
);

CREATE INDEX ix_products_collection_slug ON products (collection_slug);
CREATE INDEX ix_products_type_slug       ON products (type_slug);
CREATE INDEX ix_products_price           ON products (price);
CREATE INDEX ix_products_name            ON products (name);
CREATE INDEX ix_products_colors_gin      ON products USING gin (colors);

-- ===== JSON tables =====
CREATE TABLE about_json (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  key_slug TEXT NOT NULL UNIQUE,
  data JSONB NOT NULL,
  created_at TIMESTAMP NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP NOT NULL DEFAULT NOW()
);

CREATE TABLE contact_json (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  key_slug TEXT NOT NULL UNIQUE,
  data JSONB NOT NULL,
  created_at TIMESTAMP NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP NOT NULL DEFAULT NOW()
);

-- ===== Orders & items =====
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'order_status') THEN
    CREATE TYPE order_status AS ENUM ('pending','processing','shipped','delivered','cancelled');
  END IF;
END$$;

CREATE TABLE orders (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  order_id TEXT NOT NULL UNIQUE,
  customer_name TEXT NOT NULL,
  customer_email TEXT NOT NULL,
  customer_phone TEXT NOT NULL,
  shipping_address TEXT NOT NULL,
  order_notes TEXT,
  total_amount NUMERIC(10,2) NOT NULL,
  status order_status DEFAULT 'pending',
  created_at TIMESTAMP NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP NOT NULL DEFAULT NOW()
);

CREATE INDEX ix_orders_order_id        ON orders (order_id);
CREATE INDEX ix_orders_customer_email  ON orders (customer_email);
CREATE INDEX ix_orders_status          ON orders (status);
CREATE INDEX ix_orders_created_at      ON orders (created_at);

CREATE TABLE order_items (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  order_id TEXT NOT NULL REFERENCES orders(order_id) ON DELETE CASCADE,
  product_id BIGINT NOT NULL REFERENCES products(id) ON DELETE CASCADE,
  quantity INT NOT NULL CHECK (quantity > 0),
  unit_price NUMERIC(10,2) NOT NULL,
  total_price NUMERIC(10,2) NOT NULL,
  created_at TIMESTAMP NOT NULL DEFAULT NOW()
);

CREATE INDEX ix_order_items_order_id   ON order_items (order_id);
CREATE INDEX ix_order_items_product_id ON order_items (product_id);

-- ===== Triggers for updated_at =====
CREATE TRIGGER trg_products_set_timestamp
BEFORE UPDATE ON products
FOR EACH ROW EXECUTE FUNCTION set_timestamp();

CREATE TRIGGER trg_about_json_set_timestamp
BEFORE UPDATE ON about_json
FOR EACH ROW EXECUTE FUNCTION set_timestamp();

CREATE TRIGGER trg_contact_json_set_timestamp
BEFORE UPDATE ON contact_json
FOR EACH ROW EXECUTE FUNCTION set_timestamp();

CREATE TRIGGER trg_orders_set_timestamp
BEFORE UPDATE ON orders
FOR EACH ROW EXECUTE FUNCTION set_timestamp();

-- ===== Seed data =====

-- collections
INSERT INTO collections (slug, title, header_image, description) VALUES
('summer-2024','Summer Collection 2024','https://placehold.co/1920x600/1a1a1a/ffffff','Discover our exclusive designs'),
('spring-elegance','Spring Elegance','https://placehold.co/1920x600/1a1a1a/ffffff','Discover our exclusive designs'),
('winter-dreams','Winter Dreams','https://placehold.co/1920x600/1a1a1a/ffffff','Discover our exclusive designs'),
('autumn-mystery','Autumn Mystery','https://placehold.co/1920x600/1a1a1a/ffffff','Discover our exclusive designs')
ON CONFLICT (slug) DO UPDATE
SET title=EXCLUDED.title,
    header_image=EXCLUDED.header_image,
    description=EXCLUDED.description;

-- product_types
INSERT INTO product_types (slug, title) VALUES
('all','All'),
('undies','Undies'),
('accessories','Accessories'),
('other','Other')
ON CONFLICT (slug) DO UPDATE
SET title=EXCLUDED.title;

-- products with hex colors
INSERT INTO products (id, name, price, collection_slug, type_slug, image_url, quantity, colors, description)
VALUES
(1,'Elegant Noir',      199.99,'summer-2024','undies','https://placehold.co/600x800/1a1a1a/ffffff', 25, ARRAY['#000000','#FF0000'], 'Refined, premium piece.'),
(2,'Midnight Dream',    149.99,'summer-2024','undies','https://placehold.co/400x400/1a1a1a/ffffff',  0, ARRAY['#000000'], 'Currently out of stock.'),
(3,'Dark Romance',      299.99,'spring-elegance','undies','https://placehold.co/400x400/1a1a1a/ffffff', 12, ARRAY['#000000','#FFFFFF'], 'Statement silhouette.'),
(4,'Gothic Grace',      179.99,'winter-dreams','accessories','https://placehold.co/400x400/1a1a1a/ffffff',  7, ARRAY['#C0C0C0'], 'Winter accessory essential.'),
(5,'Mystic Allure',     249.99,'autumn-mystery','all','https://placehold.co/400x400/1a1a1a/ffffff',  9, ARRAY['#000000','#FFD700'], 'Timeless autumn favorite.'),
(6,'Velvet Shadow',     189.99,'summer-2024','undies','https://placehold.co/400x400/1a1a1a/ffffff', 18, ARRAY['#000000'], 'Soft velvet touch.'),
(7,'Ethereal Whisper',  219.99,'spring-elegance','other','https://placehold.co/400x400/1a1a1a/ffffff', 5, ARRAY['#FFFFFF'], 'Lightweight and airy.'),
(8,'Frost Enchantment', 259.99,'winter-dreams','accessories','https://placehold.co/400x400/1a1a1a/ffffff', 3, ARRAY['#00BFFF','#FFFFFF'], 'Frosty elegance.'),
(9,'Twilight Reverie',  169.99,'autumn-mystery','other','https://placehold.co/400x400/1a1a1a/ffffff', 14, ARRAY['#800080'], 'Dreamy twilight tones.'),
(10,'Moonlit Serenade', 229.99,'summer-2024','accessories','https://placehold.co/400x400/1a1a1a/ffffff', 11, ARRAY['#C0C0C0','#000000'], 'Shines under moonlight.')
ON CONFLICT (id) DO UPDATE
SET name=EXCLUDED.name,
    price=EXCLUDED.price,
    collection_slug=EXCLUDED.collection_slug,
    type_slug=EXCLUDED.type_slug,
    image_url=EXCLUDED.image_url,
    quantity=EXCLUDED.quantity,
    colors=EXCLUDED.colors,
    description=EXCLUDED.description;

SELECT setval(pg_get_serial_sequence('products','id'), (SELECT MAX(id) FROM products), true);

-- about_json
INSERT INTO about_json (key_slug, data) VALUES
('about', jsonb_build_object(
  'title', 'About CocoCulotte',
  'sections', jsonb_build_array(
    jsonb_build_object('title','Our Story','text','Founded with a passion for elegant design and sustainable fashion, CocoCulotte represents the perfect blend of style and consciousness.','image','/images/IMG_0775.JPG'),
    jsonb_build_object('title','Our Vision','text','We envision a world where fashion meets responsibility.','image','/images/IMG_0778.JPG'),
    jsonb_build_object('title','Our Promise','text','Quality and sustainability are at the heart of everything we do.','image','/images/IMG_0785.JPG')
  )
));

-- contact_json
INSERT INTO contact_json (key_slug, data) VALUES
('contact', jsonb_build_object(
  'headline', 'Get in Touch',
  'intro', 'Have questions about our collections or need assistance? We''re here to help you find the perfect piece.',
  'store', jsonb_build_object(
    'address', '123 Fashion Street',
    'cityCountry', 'Paris, France',
    'hours', 'Mon-Sat: 10am - 7pm'
  )
));
